import org.gradle.api.internal.file.FileResolver

/*
 * Copyright 2017 MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.github.jengelman.gradle.plugins.shadow.tasks.DefaultInheritManifest
import org.gradle.api.internal.file.FileResolver

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

configure([project(':bson'), project(':mongo-java-driver')]) {
    apply plugin: 'osgi'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        compile.extendsFrom shadow
    }

    shadowJar {
        from sourceSets.main.output
        configurations = [project.configurations.compile]
        mergeServiceFiles()
        relocate 'com.fasterxml', 'org.bson.shaded.fasterxml'
        classifier = 'shadow'
        dependencies {
            exclude(dependency('io.netty:.*'))
            exclude(dependency('org.slf4j:.*'))
        }
    }

    task unzipShadowJar(type: Copy, dependsOn: 'shadowJar') {
        from(zipTree(shadowJar.archivePath.getPath())) {
            include("**/*.class")
        }
        into("$buildDir/tmp/osgiShadowJar-classes".toString())
    }

    task osgiShadowJar(type: Jar, dependsOn: 'unzipShadowJar') {
        def mf = osgiManifest {
            classesDir = new File("$buildDir/tmp/osgiShadowJar-classes".toString())
            classpath = configurations.runtime
        }

        manifest = new DefaultInheritManifest(getServices().get(FileResolver.class))

        manifest.inheritFrom jar.manifest
        manifest.inheritFrom(mf) {
            eachEntry {
                if (OsgiOverride.OVERRIDE_KEYS.contains(it.getKey())) {
                    it.setValue(it.getMergeValue())
                } else {
                    it.setValue(it.getBaseValue())
                }
            }
        }

        classifier = ''

        from(zipTree(project.shadowJar.archivePath.getPath())) {
            exclude("META-INF/MANIFEST.MF")
        }
    }

    artifacts {
        archives osgiShadowJar
    }

}

class OsgiOverride {
    static final OVERRIDE_KEYS = ["Export-Package", "Import-Package"]
}

