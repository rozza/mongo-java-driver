import static org.gradle.util.CollectionUtils.single

/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def javaMainProjects = subprojects.findAll { !['util'].contains(it.name) }

task docs {
    dependsOn subprojects.collect { it.tasks.withType(Javadoc) }
    dependsOn subprojects.collect { it.tasks.withType(ScalaDoc) }
}

def buildDocsUrl(String version, String packageName) {
    def docVersion = version.split('-').head()
    def (major, minor, patch) = docVersion.split('\\.')

    docVersion = "${major}.${minor}"
    if (version.contains("-SNAPSHOT") && patch == 0) {
        // If a snapshot of the next minor version, set the version to the previous released version
        docVersion = minor > 0 ? "${major}.${minor - 1}" : '4.0'
    }

    ["http://mongodb.github.io/mongo-java-driver/${docVersion}/apidocs/${packageName}/", "${rootProject.buildDir.path}/docs/${packageName}"]
}

def utilProject = project(':util')
allprojects {
    tasks.withType(Javadoc) {
        dependsOn utilProject.compileJava //We need taglets to be compiled
        exclude "**/com/mongodb/**/benchmark/**"
        exclude "**/com/mongodb/**/internal/**"
        exclude "**/org/bson/**/internal/**"
        options {
            author = true
            version = true
            links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
            tagletPath single(utilProject.sourceSets.main.output.classesDirs)
            taglets 'ManualTaglet'
            taglets 'DochubTaglet'
            taglets 'ServerReleaseTaglet'
            encoding = 'UTF-8'
            charSet 'UTF-8'
            docEncoding 'UTF-8'
            addBooleanOption("html5", true)
            addBooleanOption("-allow-script-in-comments", true)
            header = '''
                    | <script type="text/javascript">
                    | function setLocationHash() {
                    |   try {
                    |     locationHash = top.location.hash;
                    |     if (window.name == "classFrame" && locationHash != "") {
                    |       window.location.hash = locationHash;
                    |     }
                    |   } catch (error) {}
                    | };
                    | function setGATrackingCode() {
                    |   if (window.name == "" || window.name == "classFrame") {
                    |       var _elqQ = _elqQ || [];
                    |       _elqQ.push(["elqSetSiteId", "413370795"]);
                    |       _elqQ.push(["elqTrackPageView"]);
                    |       (function () {
                    |       function async_load() { var s = document.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = "//img03.en25.com/i/elqCfg.min.js"; var x = document.getElementsByTagName("script")[0]; x.parentNode.insertBefore(s, x); }
                    |       if (window.addEventListener) window.addEventListener("DOMContentLoaded", async_load, false);
                    |       else if (window.attachEvent) window.attachEvent("onload", async_load);
                    |       })();
                    |   }
                    | };
                    | function setSearchUrlPrefix() {
                    |   if (typeof getURLPrefix === 'function') {
                    |     var getURLPrefixOri = getURLPrefix;
                    |     getURLPrefix = function(ui) {
                    |       var urlPrefix = getURLPrefixOri(ui);
                    |       return (urlPrefix && urlPrefix != "undefined/"  ? urlPrefix: "");
                    |     };
                    |   } else {
                    |     window.setTimeout(setSearchUrlPrefix, 500 );
                    |   }
                    | };
                    | setLocationHash();
                    | setGATrackingCode();
                    | setSearchUrlPrefix();
                    |
                    | </script>'''.stripMargin()
        }

        afterEvaluate {
            destinationDir = new File(rootDir, "build/docs/${project.archivesBaseName}")
            def version = project.version as String
            if (project.name != 'bson') {
                options.linksOffline(*buildDocsUrl(version, 'bson'))
                if (project.name != 'driver-core') options.linksOffline(*buildDocsUrl(version, 'mongodb-driver-core'))
                if (project.name == 'driver-legacy') {
                    dependsOn javaMainProjects.find({ it.name == 'driver-sync' }).javadoc
                    options.linksOffline(*buildDocsUrl(version, 'mongodb-driver-sync'))
                }
            }
        }
    }
}
